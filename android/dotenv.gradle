import java.util.regex.Matcher
import java.util.regex.Pattern

def readDotEnv = {
    if (!project.hasProperty("envConfigFiles")) {
        println("*********************************************************")
        println("*** envConfigFiles must be specified in build.gradle ****")
        println("*********************************************************")
        return
    }

    for (Map.Entry<String, String> entry : project.envConfigFiles.entrySet()) {
      def buildType = entry.getKey();
      def envFile = entry.getValue();

      def env = [:]
      println("Reading env from: $envFile")
      try {
        new File("$project.rootDir/../$envFile").eachLine { line ->
            def (key, val) = line.tokenize('=')
            if (key && val && key.substring(0, 1) != "#") {
                env.put(key, val)
            }
        }
      } catch (Exception ex) {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
      }
      project.ext.set("env_$buildType", env)
    }
}

readDotEnv()

android.buildTypes.all { type ->
    def envFile = "env_" + type.name;
    project.ext.get(envFile).each { k, v ->
        def escaped = v.replaceAll("%","\\\\u0025")
        buildConfigField "String", k, "\"$v\""
        resValue "string", k, "\"$escaped\""
    }
}

tasks.whenTaskAdded { task ->
    if (project.hasProperty("envConfigFiles")) {
        project.envConfigFiles.each { envConfigName, envConfigFile ->
            if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {
                task.doFirst() {
                    android.applicationVariants.all { variant ->
                        def variantConfigString = variant.getVariantData().getVariantConfiguration().getFullName()
                        if (envConfigName.contains(variantConfigString.toLowerCase())) {
                            loadDotEnv(envConfigName)
                            project.env.each { k, v ->
                                def escaped = v.replaceAll("%","\\\\u0025")
                                variant.buildConfigField "String", k, "\"$v\""
                                variant.resValue "string", k, "\"$escaped\""
                            }
                        }
                    }
                }
            }
        }
    }
}

